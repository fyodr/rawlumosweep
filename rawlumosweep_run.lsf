################################################################################
# rawlumosweep_update.lsf
# by Ted Morin
#
# run a simulation for rawlumosweep and fill outp struct
#
# (please keep in mind that all scripts share a namespace in lumerical)
################################################################################

outp = struct;

# run the simulation
time_before = now;
outp.num_modes_found = findmodes();
time_after = now;

# log the simulation runtime
sim_time_min = 0.001*(time_after-time_before)/60;

if (outp.num_modes_found == 0) {
    print("No modes found at ii = "+num2str(ii));
} else {

    te_mode_jj = 0;
    tm_mode_jj = 0;
    for (jj=1:outp.num_modes_found) {

        outp.mode_num = jj;
        target_mode = "mode" + num2str(outp.mode_num);

        # recover output from simulation
        outp.neff=getdata(target_mode,"neff");
        outp.frequency=getdata(target_mode,"f");
        outp.ng=getdata(target_mode,"ng");
        outp.loss=getdata(target_mode,"loss");
        outp.te_pol_frac=getdata(target_mode,"TE polarization fraction");
        outp.effective_area=getdata(target_mode,"mode effective area");
        if (outp.te_pol_frac > 0.5) {
            outp.is_te_mode = 1;
            outp.mode_pol_num = te_mode_jj;
            te_mode_jj = te_mode_jj + 1;
        } else {
            outp.is_te_mode = 0;
            outp.mode_pol_num = tm_mode_jj;
            tm_mode_jj = tm_mode_jj + 1;
        }

        if (inp.target_mode_is_te == outp.is_te_mode) {
            if (inp.target_mode_num == outp.mode_pol_num) {
                E=getresult(target_mode,"E");
                visualize(E);
            }
        }

        # compute calculated outputs
        outp.neff_ang = outp.neff * inp.bend_radius;

        # get index data on materials
        outp.n_waveguide=getindex(inp.wg_material, outp.frequency);
        outp.n_cladding=getindex(inp.cladding_material, outp.frequency);
        outp.n_substrate=getindex(inp.substrate_material, outp.frequency);

        # write a good summary of the output
        write_output(output_filename,output_header,inp,outp);
    }
}

