################################################################################
# rawlumosweep.lsf
# by Ted Morin
#
# script to run a 
# bend Radius And Width LUmerical MOde solutions SWEEP
#
# the following are recorded in an output csv file:
#
# inputs:
# - design wavelength
# - target mode number [counted by effective index: 1=highest, etc...]
# - waveguide material [index data)
# - cladding material [index data]
# - substrate material [index data]
# - radius of curvature [measured from wg center] (i, f, num_steps)
# - wg height
# - wg width (i, f, num_steps)
# - sim height
# - sim width
# - mesh fine height
# - mesh fine width
#
# outputs:
# - mode num
# - effective index [real and imag]
# - frequency
# - loss (dB/cm)
# - group index [real and imag]
# - TE polarization fraction
# - angular propagation constant (1/rad)
# - angular loss (dB/rad)
# - effective area (um^2)
# - mode data [NOT YET IMPLEMENTED] TODO
################################################################################

clear;
# define inputs
rawlumosweep_inputs;
# define the material_from_file function
rawlumosweep_material;
# set up model geometry
rawlumosweep_setup;
# define output_header and the write_output function
rawlumosweep_output;

################################################################################
## sweep preparation

# input vectors
wg_widths = linspace(wg_width_i, wg_width_f, wg_width_num_steps);
bend_radii = linspace(bend_radius_i, bend_radius_f, bend_radius_num_steps);

#Initialize output matrices
mode_num=matrix(wg_width_num_steps, bend_radius_num_steps);
neff=matrix(wg_width_num_steps, bend_radius_num_steps);
frequency=matrix(wg_width_num_steps, bend_radius_num_steps);
ng=matrix(wg_width_num_steps, bend_radius_num_steps);
loss=matrix(wg_width_num_steps, bend_radius_num_steps);
te_pol_frac=matrix(wg_width_num_steps, bend_radius_num_steps);
mode_eff_area=matrix(wg_width_num_steps, bend_radius_num_steps);
number_of_modes_found=matrix(wg_width_num_steps, bend_radius_num_steps);
#mode_field_data=matrix(wg_width_num_steps, bend_radius_num_steps); #TODO

mode_found = 0;

# write a header to the output file
write(output_filename, output_header); 
# output_filename is defined in rawlumosweep_inputs.lsf
# output_header   is defined in rawlumosweep_output.lsf

################################################################################
## sweep proper

for (ii=1:wg_width_num_steps) {

    switchtolayout;
    select("waveguide");
    set("x span", wg_widths(ii));
    
    for (jj=1:bend_radius_num_steps) {
        switchtolayout;
        select("FDE");
        set("bend radius", bend_radii(jj));

        # run the simulation
        time_before = now;
        number_of_modes_found(ii,jj) = findmodes();
        time_after = now;
        
        # log the simulation runtime
        ?sim_time_min = 0.001*(time_after-time_before)/60;
        
        if (number_of_modes_found(ii,jj) == 0) {
            print("No modes found at ii = "+num2str(ii)+", jj = "+num2str(jj));
        } else {
        
        if (!mode_found) {

            #get the e field profile of the prototype mode
            target_mode = "mode" + num2str(target_mode_num);
            copydcard(target_mode,"target_mode_dcard");
            #neff(ii,jj)=getdata(target_mode,"neff");
        
            if (visually_check_proto==1) {
            E=getresult("FDE::data::mode"+num2str(target_mode_num),"E");
            visualize(E);
            }
        
            mode_found = 1;

        } else {
        
            #find mode with best overlap
            target_mode = bestoverlap("target_mode_dcard");
            #cleardcard("target_mode");
            #copydcard(bestMode,"target_mode_card");
        
            if (visually_check_all==1) {
                E=getresult(target_mode,"E");
                visualize(E);
            }
        
        } # prototype mode if end

        # record data to matrices
        mode_num(ii,jj)=str2num(substring(target_mode,5));
        neff(ii,jj)=getdata(target_mode,"neff");
        frequency(ii,jj)=getdata(target_mode,"f");
        ng(ii,jj)=getdata(target_mode,"ng");
        loss(ii,jj)=getdata(target_mode,"loss");
        te_pol_frac(ii,jj)=getdata(target_mode,"TE polarization fraction");
        mode_eff_area(ii,jj)=getdata(target_mode,"mode effective area");
        
        # write a good summary of that output!
        # note: angular propagation and angular loss should be
        #       output values, but they are just set to zero for now. TODO
        write_output(output_filename,output_header,lambda,target_mode_num,wg_material,cladding_material,substrate_material,bend_radii(jj),wg_widths(ii),wg_height,sim_height,sim_width,sim_dy,sim_dx,mesh_fine_width,mesh_fine_height,mesh_fine_dy,mesh_fine_dx,mode_num(ii,jj),frequency(ii,jj),real(neff(ii,jj)),imag(neff(ii,jj)),loss(ii,jj),real(ng(ii,jj)),imag(ng(ii,jj)),te_pol_frac(ii,jj),mode_eff_area(ii,jj),0,0,number_of_modes_found(ii,jj));
        
        } # error check if end
    } #inner loop end
} #outer loop end

################################################################################
## cleanup

# remove dcard
cleardcard("target_mode_dcard");

################################################################################
## immediate plotting/analysis

## plots
# image plot of effective index
image(wg_widths, bend_radii, real(neff));
# image plot of loss
image(wg_widths, bend_radii, loss);

